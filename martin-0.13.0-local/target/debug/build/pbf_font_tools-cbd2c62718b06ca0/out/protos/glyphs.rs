// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `glyphs.proto`
// Generated for lite runtime

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:llmr.glyphs.glyph)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Glyph {
    // message fields
    // @@protoc_insertion_point(field:llmr.glyphs.glyph.id)
    pub id: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:llmr.glyphs.glyph.bitmap)
    pub bitmap: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:llmr.glyphs.glyph.width)
    pub width: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:llmr.glyphs.glyph.height)
    pub height: ::std::option::Option<u32>,
    // @@protoc_insertion_point(field:llmr.glyphs.glyph.left)
    pub left: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:llmr.glyphs.glyph.top)
    pub top: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:llmr.glyphs.glyph.advance)
    pub advance: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:llmr.glyphs.glyph.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Glyph {
    fn default() -> &'a Glyph {
        <Glyph as ::protobuf::Message>::default_instance()
    }
}

impl Glyph {
    pub fn new() -> Glyph {
        ::std::default::Default::default()
    }

    // required uint32 id = 1;

    pub fn id(&self) -> u32 {
        self.id.unwrap_or(0)
    }

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    // optional bytes bitmap = 2;

    pub fn bitmap(&self) -> &[u8] {
        match self.bitmap.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_bitmap(&mut self) {
        self.bitmap = ::std::option::Option::None;
    }

    pub fn has_bitmap(&self) -> bool {
        self.bitmap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bitmap(&mut self, v: ::std::vec::Vec<u8>) {
        self.bitmap = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bitmap(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.bitmap.is_none() {
            self.bitmap = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.bitmap.as_mut().unwrap()
    }

    // Take field
    pub fn take_bitmap(&mut self) -> ::std::vec::Vec<u8> {
        self.bitmap.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required uint32 width = 3;

    pub fn width(&self) -> u32 {
        self.width.unwrap_or(0)
    }

    pub fn clear_width(&mut self) {
        self.width = ::std::option::Option::None;
    }

    pub fn has_width(&self) -> bool {
        self.width.is_some()
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: u32) {
        self.width = ::std::option::Option::Some(v);
    }

    // required uint32 height = 4;

    pub fn height(&self) -> u32 {
        self.height.unwrap_or(0)
    }

    pub fn clear_height(&mut self) {
        self.height = ::std::option::Option::None;
    }

    pub fn has_height(&self) -> bool {
        self.height.is_some()
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u32) {
        self.height = ::std::option::Option::Some(v);
    }

    // required sint32 left = 5;

    pub fn left(&self) -> i32 {
        self.left.unwrap_or(0)
    }

    pub fn clear_left(&mut self) {
        self.left = ::std::option::Option::None;
    }

    pub fn has_left(&self) -> bool {
        self.left.is_some()
    }

    // Param is passed by value, moved
    pub fn set_left(&mut self, v: i32) {
        self.left = ::std::option::Option::Some(v);
    }

    // required sint32 top = 6;

    pub fn top(&self) -> i32 {
        self.top.unwrap_or(0)
    }

    pub fn clear_top(&mut self) {
        self.top = ::std::option::Option::None;
    }

    pub fn has_top(&self) -> bool {
        self.top.is_some()
    }

    // Param is passed by value, moved
    pub fn set_top(&mut self, v: i32) {
        self.top = ::std::option::Option::Some(v);
    }

    // required uint32 advance = 7;

    pub fn advance(&self) -> u32 {
        self.advance.unwrap_or(0)
    }

    pub fn clear_advance(&mut self) {
        self.advance = ::std::option::Option::None;
    }

    pub fn has_advance(&self) -> bool {
        self.advance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_advance(&mut self, v: u32) {
        self.advance = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for Glyph {
    const NAME: &'static str = "glyph";

    fn is_initialized(&self) -> bool {
        if self.id.is_none() {
            return false;
        }
        if self.width.is_none() {
            return false;
        }
        if self.height.is_none() {
            return false;
        }
        if self.left.is_none() {
            return false;
        }
        if self.top.is_none() {
            return false;
        }
        if self.advance.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_uint32()?);
                },
                18 => {
                    self.bitmap = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.width = ::std::option::Option::Some(is.read_uint32()?);
                },
                32 => {
                    self.height = ::std::option::Option::Some(is.read_uint32()?);
                },
                40 => {
                    self.left = ::std::option::Option::Some(is.read_sint32()?);
                },
                48 => {
                    self.top = ::std::option::Option::Some(is.read_sint32()?);
                },
                56 => {
                    self.advance = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::uint32_size(1, v);
        }
        if let Some(v) = self.bitmap.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.width {
            my_size += ::protobuf::rt::uint32_size(3, v);
        }
        if let Some(v) = self.height {
            my_size += ::protobuf::rt::uint32_size(4, v);
        }
        if let Some(v) = self.left {
            my_size += ::protobuf::rt::sint32_size(5, v);
        }
        if let Some(v) = self.top {
            my_size += ::protobuf::rt::sint32_size(6, v);
        }
        if let Some(v) = self.advance {
            my_size += ::protobuf::rt::uint32_size(7, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.bitmap.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.width {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.height {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.left {
            os.write_sint32(5, v)?;
        }
        if let Some(v) = self.top {
            os.write_sint32(6, v)?;
        }
        if let Some(v) = self.advance {
            os.write_uint32(7, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Glyph {
        Glyph::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.bitmap = ::std::option::Option::None;
        self.width = ::std::option::Option::None;
        self.height = ::std::option::Option::None;
        self.left = ::std::option::Option::None;
        self.top = ::std::option::Option::None;
        self.advance = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Glyph {
        static instance: Glyph = Glyph {
            id: ::std::option::Option::None,
            bitmap: ::std::option::Option::None,
            width: ::std::option::Option::None,
            height: ::std::option::Option::None,
            left: ::std::option::Option::None,
            top: ::std::option::Option::None,
            advance: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:llmr.glyphs.fontstack)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Fontstack {
    // message fields
    // @@protoc_insertion_point(field:llmr.glyphs.fontstack.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:llmr.glyphs.fontstack.range)
    pub range: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:llmr.glyphs.fontstack.glyphs)
    pub glyphs: ::std::vec::Vec<Glyph>,
    // special fields
    // @@protoc_insertion_point(special_field:llmr.glyphs.fontstack.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Fontstack {
    fn default() -> &'a Fontstack {
        <Fontstack as ::protobuf::Message>::default_instance()
    }
}

impl Fontstack {
    pub fn new() -> Fontstack {
        ::std::default::Default::default()
    }

    // required string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string range = 2;

    pub fn range(&self) -> &str {
        match self.range.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_range(&mut self) {
        self.range = ::std::option::Option::None;
    }

    pub fn has_range(&self) -> bool {
        self.range.is_some()
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: ::std::string::String) {
        self.range = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_range(&mut self) -> &mut ::std::string::String {
        if self.range.is_none() {
            self.range = ::std::option::Option::Some(::std::string::String::new());
        }
        self.range.as_mut().unwrap()
    }

    // Take field
    pub fn take_range(&mut self) -> ::std::string::String {
        self.range.take().unwrap_or_else(|| ::std::string::String::new())
    }
}

impl ::protobuf::Message for Fontstack {
    const NAME: &'static str = "fontstack";

    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        }
        if self.range.is_none() {
            return false;
        }
        for v in &self.glyphs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.range = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.glyphs.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.range.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        for value in &self.glyphs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.range.as_ref() {
            os.write_string(2, v)?;
        }
        for v in &self.glyphs {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Fontstack {
        Fontstack::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.range = ::std::option::Option::None;
        self.glyphs.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Fontstack {
        static instance: Fontstack = Fontstack {
            name: ::std::option::Option::None,
            range: ::std::option::Option::None,
            glyphs: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

// @@protoc_insertion_point(message:llmr.glyphs.glyphs)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Glyphs {
    // message fields
    // @@protoc_insertion_point(field:llmr.glyphs.glyphs.stacks)
    pub stacks: ::std::vec::Vec<Fontstack>,
    // special fields
    // @@protoc_insertion_point(special_field:llmr.glyphs.glyphs.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Glyphs {
    fn default() -> &'a Glyphs {
        <Glyphs as ::protobuf::Message>::default_instance()
    }
}

impl Glyphs {
    pub fn new() -> Glyphs {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Glyphs {
    const NAME: &'static str = "glyphs";

    fn is_initialized(&self) -> bool {
        for v in &self.stacks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.stacks.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.stacks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.stacks {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Glyphs {
        Glyphs::new()
    }

    fn clear(&mut self) {
        self.stacks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Glyphs {
        static instance: Glyphs = Glyphs {
            stacks: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}
